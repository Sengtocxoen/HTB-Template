import subprocess
import sys
import os
from typing import Dict, List, Tuple

class ToolChecker:
    def __init__(self):
        self.required_tools = {
            # Network scanning and enumeration
            'nmap': {
                'command': 'nmap --version',
                'install_command': 'apt-get install nmap',
                'description': 'Network mapper for security scanning'
            },
            'masscan': {
                'command': 'masscan --version',
                'install_command': 'apt-get install masscan',
                'description': 'Fast port scanner'
            },
            'netcat': {
                'command': 'nc -h',
                'install_command': 'apt-get install netcat',
                'description': 'Network utility for reading/writing network connections'
            },
            
            # Web enumeration and exploitation
            'gobuster': {
                'command': 'gobuster version',
                'install_command': 'apt-get install gobuster',
                'description': 'Directory/file enumeration tool'
            },
            'nikto': {
                'command': 'nikto -Version',
                'install_command': 'apt-get install nikto',
                'description': 'Web server scanner'
            },
            'sqlmap': {
                'command': 'sqlmap --version',
                'install_command': 'apt-get install sqlmap',
                'description': 'SQL injection tool'
            },
            'whatweb': {
                'command': 'whatweb --version',
                'install_command': 'apt-get install whatweb',
                'description': 'Web technology identifier'
            },
            
            # Password attacks
            'hydra': {
                'command': 'hydra -h',
                'install_command': 'apt-get install hydra',
                'description': 'Password cracking tool'
            },
            'john': {
                'command': 'john --version',
                'install_command': 'apt-get install john',
                'description': 'Password cracking tool'
            },
            'hashcat': {
                'command': 'hashcat --version',
                'install_command': 'apt-get install hashcat',
                'description': 'Advanced password recovery'
            },
            
            # Windows-specific tools
            'smbclient': {
                'command': 'smbclient --version',
                'install_command': 'apt-get install smbclient',
                'description': 'SMB client for Windows shares'
            },
            'rpcclient': {
                'command': 'rpcclient -h',
                'install_command': 'apt-get install rpcclient',
                'description': 'RPC client for Windows'
            },
            'ldapsearch': {
                'command': 'ldapsearch -V',
                'install_command': 'apt-get install ldap-utils',
                'description': 'LDAP search tool'
            },
            
            # Linux-specific tools
            'enum4linux': {
                'command': 'enum4linux -h',
                'install_command': 'apt-get install enum4linux',
                'description': 'Linux enumeration tool'
            },
            'linpeas': {
                'command': 'linpeas -h',
                'install_command': 'curl -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh -o /usr/local/bin/linpeas && chmod +x /usr/local/bin/linpeas',
                'description': 'Linux privilege escalation script'
            },
            'linenum': {
                'command': 'linenum -h',
                'install_command': 'curl -L https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -o /usr/local/bin/linenum && chmod +x /usr/local/bin/linenum',
                'description': 'Linux enumeration script'
            },
            
            # Exploitation frameworks
            'metasploit': {
                'command': 'msfconsole --version',
                'install_command': 'apt-get install metasploit-framework',
                'description': 'Exploitation framework'
            },
            'searchsploit': {
                'command': 'searchsploit -h',
                'install_command': 'apt-get install exploitdb',
                'description': 'Exploit database search tool'
            },
            
            # Additional utilities
            'python3': {
                'command': 'python3 --version',
                'install_command': 'apt-get install python3',
                'description': 'Python 3 interpreter'
            },
            'pip3': {
                'command': 'pip3 --version',
                'install_command': 'apt-get install python3-pip',
                'description': 'Python package manager'
            },
            'git': {
                'command': 'git --version',
                'install_command': 'apt-get install git',
                'description': 'Version control system'
            }
        }

    def check_tool(self, tool_name: str) -> Tuple[bool, str]:
        """Check if a specific tool is installed."""
        if tool_name not in self.required_tools:
            return False, f"Unknown tool: {tool_name}"

        try:
            result = subprocess.run(
                self.required_tools[tool_name]['command'].split(),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            return result.returncode == 0, ""
        except FileNotFoundError:
            return False, f"{tool_name} is not installed"

    def check_all_tools(self) -> Dict[str, Tuple[bool, str]]:
        """Check all required tools."""
        results = {}
        for tool in self.required_tools:
            is_installed, message = self.check_tool(tool)
            results[tool] = (is_installed, message)
        return results

    def get_installation_instructions(self) -> str:
        """Get installation instructions for missing tools."""
        missing_tools = []
        for tool, (is_installed, _) in self.check_all_tools().items():
            if not is_installed:
                missing_tools.append(f"{tool}: {self.required_tools[tool]['description']}\n"
                                   f"Install with: {self.required_tools[tool]['install_command']}")
        
        if missing_tools:
            return "\n\n".join(missing_tools)
        return "All required tools are installed."

def main():
    checker = ToolChecker()
    results = checker.check_all_tools()
    
    print("Tool Check Results:")
    print("-" * 50)
    
    all_installed = True
    for tool, (is_installed, message) in results.items():
        status = "✓ Installed" if is_installed else "✗ Not installed"
        print(f"{tool}: {status}")
        if not is_installed:
            all_installed = False
            print(f"  - {message}")
    
    if not all_installed:
        print("\nInstallation Instructions:")
        print("-" * 50)
        print(checker.get_installation_instructions())
        sys.exit(1)
    else:
        print("\nAll required tools are installed and ready to use!")

if __name__ == "__main__":
    main() 