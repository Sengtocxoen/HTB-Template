#!/usr/bin/env python3
import subprocess
import os
import json
import requests
import re
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

class LateralMovement:
    def __init__(self, target, logger):
        self.target = target
        self.logger = logger
        self.findings = {
            "pivoting": {},
            "evasive_testing": {},
            "information_gathering": {},
            "vulnerability_assessment": {},
            "exploitation": {},
            "post_exploitation": {}
        }
        self.output_dir = f"reports/lateral_movement_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        os.makedirs(self.output_dir, exist_ok=True)
        
        # Load previous stage results
        self.exploit_results = self._load_exploitation_results()
        self.post_exploit_results = self._load_post_exploitation_results()
        
        # Common lateral movement tools
        self.lateral_tools = {
            "network": [
                "nmap",
                "masscan",
                "crackmapexec",
                "responder"
            ],
            "credential": [
                "mimikatz",
                "secretsdump",
                "psexec",
                "wmiexec"
            ],
            "pivoting": [
                "chisel",
                "proxychains",
                "sshuttle",
                "rpivot"
            ]
        }

    def _load_exploitation_results(self):
        """Load results from exploitation stage"""
        try:
            exploit_dir = max([d for d in os.listdir("reports") if d.startswith("exploitation_")])
            with open(f"reports/{exploit_dir}/findings.json", 'r') as f:
                return json.load(f)
        except Exception as e:
            self.logger.error(f"Failed to load exploitation results: {str(e)}")
            return None

    def _load_post_exploitation_results(self):
        """Load results from post-exploitation stage"""
        try:
            post_exploit_dir = max([d for d in os.listdir("reports") if d.startswith("post_exploitation_")])
            with open(f"reports/{post_exploit_dir}/findings.json", 'r') as f:
                return json.load(f)
        except Exception as e:
            self.logger.error(f"Failed to load post-exploitation results: {str(e)}")
            return None

    def run(self):
        """Run all lateral movement tasks"""
        self.logger.info("Starting Lateral Movement phase...")
        
        # 1. Pivoting
        self.logger.info("Setting up pivoting...")
        self.findings["pivoting"] = self.pivoting()
        
        # 2. Evasive Testing
        self.logger.info("Performing evasive testing...")
        self.findings["evasive_testing"] = self.evasive_testing()
        
        # 3. Information Gathering
        self.logger.info("Gathering network information...")
        self.findings["information_gathering"] = self.information_gathering()
        
        # 4. Vulnerability Assessment
        self.logger.info("Assessing vulnerabilities...")
        self.findings["vulnerability_assessment"] = self.vulnerability_assessment()
        
        # 5. Exploitation
        self.logger.info("Attempting exploitation...")
        self.findings["exploitation"] = self.exploitation()
        
        # 6. Post-Exploitation
        self.logger.info("Performing post-exploitation...")
        self.findings["post_exploitation"] = self.post_exploitation()
        
        # Save findings
        self._save_findings()
        
        return self.findings

    def _save_findings(self):
        """Save findings to JSON file"""
        output_file = f"{self.output_dir}/findings.json"
        with open(output_file, 'w') as f:
            json.dump(self.findings, f, indent=4)
        self.logger.info(f"Findings saved to {output_file}")

    def run_command(self, command, capture_output=True):
        """Run a system command and return the output"""
        try:
            if isinstance(command, list):
                result = subprocess.run(command, capture_output=capture_output, text=True)
            else:
                result = subprocess.run(command, capture_output=capture_output, text=True, shell=True)
                
            if result.returncode != 0:
                self.logger.error(f"Command failed: {result.stderr}")
                return None
                
            return result.stdout if capture_output else "Command executed successfully"
            
        except Exception as e:
            self.logger.error(f"Error executing command: {str(e)}")
            return None

    def pivoting(self):
        """Set up pivoting for lateral movement"""
        results = {}
        
        # 1. Network Interface Analysis
        self.logger.info("Analyzing network interfaces...")
        interface_analysis = self._analyze_network_interfaces()
        results["interface_analysis"] = interface_analysis
        
        # 2. Route Analysis
        self.logger.info("Analyzing routing tables...")
        route_analysis = self._analyze_routes()
        results["route_analysis"] = route_analysis
        
        # 3. Proxy Setup
        self.logger.info("Setting up proxies...")
        proxy_setup = self._setup_proxies()
        results["proxy_setup"] = proxy_setup
        
        # 4. SSH Tunneling
        self.logger.info("Setting up SSH tunnels...")
        ssh_tunnels = self._setup_ssh_tunnels()
        results["ssh_tunnels"] = ssh_tunnels
        
        return results

    def _analyze_network_interfaces(self):
        """Analyze network interfaces for pivoting"""
        interfaces = {}
        
        os_type = self._detect_os_type()
        if os_type:
            if os_type == "linux":
                # Get interface information
                ifconfig_cmd = "ifconfig -a"
                ifconfig = self.run_command(ifconfig_cmd)
                if ifconfig:
                    interfaces["ifconfig"] = ifconfig
                    
                # Get IP information
                ip_cmd = "ip addr show"
                ip = self.run_command(ip_cmd)
                if ip:
                    interfaces["ip_info"] = ip
                    
            elif os_type == "windows":
                # Get interface information
                ipconfig_cmd = "ipconfig /all"
                ipconfig = self.run_command(ipconfig_cmd)
                if ipconfig:
                    interfaces["ipconfig"] = ipconfig
                    
                # Get network connections
                netstat_cmd = "netstat -ano"
                netstat = self.run_command(netstat_cmd)
                if netstat:
                    interfaces["netstat"] = netstat
                    
        return interfaces

    def _analyze_routes(self):
        """Analyze routing tables for pivoting"""
        routes = {}
        
        os_type = self._detect_os_type()
        if os_type:
            if os_type == "linux":
                # Get routing table
                route_cmd = "netstat -rn"
                route = self.run_command(route_cmd)
                if route:
                    routes["routing_table"] = route
                    
                # Get ARP table
                arp_cmd = "arp -a"
                arp = self.run_command(arp_cmd)
                if arp:
                    routes["arp_table"] = arp
                    
            elif os_type == "windows":
                # Get routing table
                route_cmd = "route print"
                route = self.run_command(route_cmd)
                if route:
                    routes["routing_table"] = route
                    
                # Get ARP table
                arp_cmd = "arp -a"
                arp = self.run_command(arp_cmd)
                if arp:
                    routes["arp_table"] = arp
                    
        return routes

    def _setup_proxies(self):
        """Set up proxies for pivoting"""
        proxies = {}
        
        # Set up SOCKS proxy
        socks_cmd = "ssh -D 1080 -N -f user@target"
        socks = self.run_command(socks_cmd)
        if socks:
            proxies["socks_proxy"] = socks
            
        # Set up HTTP proxy
        http_cmd = "ssh -R 8080:localhost:80 -N -f user@target"
        http = self.run_command(http_cmd)
        if http:
            proxies["http_proxy"] = http
            
        return proxies

    def _setup_ssh_tunnels(self):
        """Set up SSH tunnels for pivoting"""
        tunnels = {}
        
        # Local port forwarding
        local_cmd = "ssh -L 8080:target:80 -N -f user@target"
        local = self.run_command(local_cmd)
        if local:
            tunnels["local_forwarding"] = local
            
        # Remote port forwarding
        remote_cmd = "ssh -R 8080:localhost:80 -N -f user@target"
        remote = self.run_command(remote_cmd)
        if remote:
            tunnels["remote_forwarding"] = remote
            
        return tunnels

    def evasive_testing(self):
        """Perform evasive testing"""
        results = {}
        
        # 1. Anti-Virus Detection
        self.logger.info("Testing anti-virus detection...")
        av_detection = self._test_av_detection()
        results["av_detection"] = av_detection
        
        # 2. Network Monitoring
        self.logger.info("Testing network monitoring...")
        network_monitoring = self._test_network_monitoring()
        results["network_monitoring"] = network_monitoring
        
        # 3. Process Monitoring
        self.logger.info("Testing process monitoring...")
        process_monitoring = self._test_process_monitoring()
        results["process_monitoring"] = process_monitoring
        
        return results

    def _test_av_detection(self):
        """Test anti-virus detection"""
        detection = {}
        
        os_type = self._detect_os_type()
        if os_type:
            if os_type == "linux":
                # Check for AV processes
                av_cmd = "ps aux | grep -i 'antivirus\|clamav\|avast'"
                av = self.run_command(av_cmd)
                if av:
                    detection["av_processes"] = av
                    
            elif os_type == "windows":
                # Check for AV processes
                av_cmd = "tasklist /v | findstr /i 'antivirus avast defender'"
                av = self.run_command(av_cmd)
                if av:
                    detection["av_processes"] = av
                    
                # Check for AV services
                service_cmd = "sc query | findstr /i 'antivirus avast defender'"
                service = self.run_command(service_cmd)
                if service:
                    detection["av_services"] = service
                    
        return detection

    def _test_network_monitoring(self):
        """Test network monitoring"""
        monitoring = {}
        
        # Check for network monitoring tools
        tools_cmd = "netstat -an | findstr LISTENING"
        tools = self.run_command(tools_cmd)
        if tools:
            monitoring["listening_ports"] = tools
            
        # Check for IDS/IPS
        ids_cmd = "ps aux | grep -i 'snort\|suricata\|zeek'"
        ids = self.run_command(ids_cmd)
        if ids:
            monitoring["ids_processes"] = ids
            
        return monitoring

    def _test_process_monitoring(self):
        """Test process monitoring"""
        monitoring = {}
        
        os_type = self._detect_os_type()
        if os_type:
            if os_type == "linux":
                # Check for monitoring processes
                mon_cmd = "ps aux | grep -i 'monitor\|watch\|audit'"
                mon = self.run_command(mon_cmd)
                if mon:
                    monitoring["monitoring_processes"] = mon
                    
            elif os_type == "windows":
                # Check for monitoring processes
                mon_cmd = "tasklist /v | findstr /i 'monitor watch audit'"
                mon = self.run_command(mon_cmd)
                if mon:
                    monitoring["monitoring_processes"] = mon
                    
        return monitoring

    def information_gathering(self):
        """Gather information about the network"""
        results = {}
        
        # 1. Network Discovery
        self.logger.info("Discovering network...")
        network_discovery = self._discover_network()
        results["network_discovery"] = network_discovery
        
        # 2. Service Enumeration
        self.logger.info("Enumerating services...")
        service_enumeration = self._enumerate_services()
        results["service_enumeration"] = service_enumeration
        
        # 3. User Enumeration
        self.logger.info("Enumerating users...")
        user_enumeration = self._enumerate_users()
        results["user_enumeration"] = user_enumeration
        
        return results

    def _discover_network(self):
        """Discover network for lateral movement"""
        discovery = {}
        
        # Network scan
        scan_cmd = "nmap -sn 192.168.1.0/24"
        scan = self.run_command(scan_cmd)
        if scan:
            discovery["network_scan"] = scan
            
        # Port scan
        port_cmd = "nmap -p 1-1000 192.168.1.0/24"
        port = self.run_command(port_cmd)
        if port:
            discovery["port_scan"] = port
            
        return discovery

    def _enumerate_services(self):
        """Enumerate services on the network"""
        services = {}
        
        # Service version scan
        version_cmd = "nmap -sV 192.168.1.0/24"
        version = self.run_command(version_cmd)
        if version:
            services["version_scan"] = version
            
        # Service vulnerability scan
        vuln_cmd = "nmap --script vuln 192.168.1.0/24"
        vuln = self.run_command(vuln_cmd)
        if vuln:
            services["vulnerability_scan"] = vuln
            
        return services

    def _enumerate_users(self):
        """Enumerate users on the network"""
        users = {}
        
        os_type = self._detect_os_type()
        if os_type:
            if os_type == "linux":
                # Get user information
                user_cmd = "cat /etc/passwd"
                user = self.run_command(user_cmd)
                if user:
                    users["user_info"] = user
                    
            elif os_type == "windows":
                # Get user information
                user_cmd = "net user"
                user = self.run_command(user_cmd)
                if user:
                    users["user_info"] = user
                    
                # Get group information
                group_cmd = "net localgroup"
                group = self.run_command(group_cmd)
                if group:
                    users["group_info"] = group
                    
        return users

    def vulnerability_assessment(self):
        """Assess vulnerabilities in the network"""
        results = {}
        
        # 1. Service Vulnerabilities
        self.logger.info("Assessing service vulnerabilities...")
        service_vulns = self._assess_service_vulnerabilities()
        results["service_vulnerabilities"] = service_vulns
        
        # 2. Configuration Vulnerabilities
        self.logger.info("Assessing configuration vulnerabilities...")
        config_vulns = self._assess_configuration_vulnerabilities()
        results["configuration_vulnerabilities"] = config_vulns
        
        # 3. Authentication Vulnerabilities
        self.logger.info("Assessing authentication vulnerabilities...")
        auth_vulns = self._assess_authentication_vulnerabilities()
        results["authentication_vulnerabilities"] = auth_vulns
        
        return results

    def _assess_service_vulnerabilities(self):
        """Assess service vulnerabilities"""
        vulns = {}
        
        # Check for vulnerable services
        service_cmd = "nmap --script vuln -p 1-1000 192.168.1.0/24"
        service = self.run_command(service_cmd)
        if service:
            vulns["vulnerable_services"] = service
            
        # Check for default credentials
        cred_cmd = "nmap --script default -p 1-1000 192.168.1.0/24"
        cred = self.run_command(cred_cmd)
        if cred:
            vulns["default_credentials"] = cred
            
        return vulns

    def _assess_configuration_vulnerabilities(self):
        """Assess configuration vulnerabilities"""
        vulns = {}
        
        # Check for misconfigurations
        misconfig_cmd = "nmap --script safe -p 1-1000 192.168.1.0/24"
        misconfig = self.run_command(misconfig_cmd)
        if misconfig:
            vulns["misconfigurations"] = misconfig
            
        return vulns

    def _assess_authentication_vulnerabilities(self):
        """Assess authentication vulnerabilities"""
        vulns = {}
        
        # Check for weak authentication
        auth_cmd = "nmap --script auth -p 1-1000 192.168.1.0/24"
        auth = self.run_command(auth_cmd)
        if auth:
            vulns["weak_authentication"] = auth
            
        return vulns

    def exploitation(self):
        """Attempt exploitation of vulnerabilities"""
        results = {}
        
        # 1. Service Exploitation
        self.logger.info("Attempting service exploitation...")
        service_exploits = self._attempt_service_exploitation()
        results["service_exploits"] = service_exploits
        
        # 2. Authentication Exploitation
        self.logger.info("Attempting authentication exploitation...")
        auth_exploits = self._attempt_authentication_exploitation()
        results["auth_exploits"] = auth_exploits
        
        return results

    def _attempt_service_exploitation(self):
        """Attempt service exploitation"""
        exploits = {}
        
        # Attempt service exploits
        service_cmd = "nmap --script exploit -p 1-1000 192.168.1.0/24"
        service = self.run_command(service_cmd)
        if service:
            exploits["service_exploits"] = service
            
        return exploits

    def _attempt_authentication_exploitation(self):
        """Attempt authentication exploitation"""
        exploits = {}
        
        # Attempt authentication exploits
        auth_cmd = "nmap --script auth -p 1-1000 192.168.1.0/24"
        auth = self.run_command(auth_cmd)
        if auth:
            exploits["auth_exploits"] = auth
            
        return exploits

    def post_exploitation(self):
        """Perform post-exploitation activities"""
        results = {}
        
        # 1. System Information
        self.logger.info("Gathering system information...")
        system_info = self._gather_system_info()
        results["system_info"] = system_info
        
        # 2. User Information
        self.logger.info("Gathering user information...")
        user_info = self._gather_user_info()
        results["user_info"] = user_info
        
        # 3. Network Information
        self.logger.info("Gathering network information...")
        network_info = self._gather_network_info()
        results["network_info"] = network_info
        
        return results

    def _gather_system_info(self):
        """Gather system information"""
        info = {}
        
        os_type = self._detect_os_type()
        if os_type:
            if os_type == "linux":
                # Get system information
                sys_cmd = "uname -a"
                sys = self.run_command(sys_cmd)
                if sys:
                    info["system_info"] = sys
                    
            elif os_type == "windows":
                # Get system information
                sys_cmd = "systeminfo"
                sys = self.run_command(sys_cmd)
                if sys:
                    info["system_info"] = sys
                    
        return info

    def _gather_user_info(self):
        """Gather user information"""
        info = {}
        
        os_type = self._detect_os_type()
        if os_type:
            if os_type == "linux":
                # Get user information
                user_cmd = "cat /etc/passwd"
                user = self.run_command(user_cmd)
                if user:
                    info["user_info"] = user
                    
            elif os_type == "windows":
                # Get user information
                user_cmd = "net user"
                user = self.run_command(user_cmd)
                if user:
                    info["user_info"] = user
                    
        return info

    def _gather_network_info(self):
        """Gather network information"""
        info = {}
        
        os_type = self._detect_os_type()
        if os_type:
            if os_type == "linux":
                # Get network information
                net_cmd = "ifconfig -a"
                net = self.run_command(net_cmd)
                if net:
                    info["network_info"] = net
                    
            elif os_type == "windows":
                # Get network information
                net_cmd = "ipconfig /all"
                net = self.run_command(net_cmd)
                if net:
                    info["network_info"] = net
                    
        return info

    def _detect_os_type(self):
        """Detect the operating system type"""
        try:
            result = self.run_command("uname -a")
            if result:
                return "linux"
            result = self.run_command("ver")
            if result:
                return "windows"
        except:
            pass
        return None 