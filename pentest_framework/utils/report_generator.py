#!/usr/bin/env python3
import os
import json
from datetime import datetime

class ReportGenerator:
    def __init__(self, findings, output_dir, timestamp):
        self.findings = findings
        self.output_dir = output_dir
        self.timestamp = timestamp
        self.report_file = f"{output_dir}/pentest_report_{timestamp}.txt"
        self.json_file = f"{output_dir}/findings_{timestamp}.json"

    def generate(self):
        """Generate the final penetration test report"""
        # Save findings to JSON file
        with open(self.json_file, "w") as f:
            json.dump(self.findings, f, indent=4)
            
        # Generate text report
        with open(self.report_file, "w") as f:
            f.write(f"# Penetration Test Report\n")
            f.write(f"# Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            # Generate each section
            self._generate_executive_summary(f)
            self._generate_detailed_findings(f)
            self._generate_recommendations(f)

    def _generate_executive_summary(self, file):
        """Generate executive summary section"""
        file.write("\n" + "="*80 + "\n")
        file.write("EXECUTIVE SUMMARY\n")
        file.write("="*80 + "\n\n")
        
        for stage, findings in self.findings.items():
            file.write(f"## {stage.replace('_', ' ').title()}\n")
            if findings:
                for category, data in findings.items():
                    file.write(f"- {category.replace('_', ' ').title()}: ")
                    if data:
                        file.write("Completed successfully\n")
                    else:
                        file.write("No findings\n")
            else:
                file.write("- No findings\n")
            file.write("\n")

    def _generate_detailed_findings(self, file):
        """Generate detailed findings section"""
        file.write("\n" + "="*80 + "\n")
        file.write("DETAILED FINDINGS\n")
        file.write("="*80 + "\n\n")
        
        for stage, findings in self.findings.items():
            file.write(f"## {stage.replace('_', ' ').title()}\n")
            if findings:
                for category, data in findings.items():
                    file.write(f"\n### {category.replace('_', ' ').title()}\n")
                    if isinstance(data, dict):
                        for key, value in data.items():
                            file.write(f"- {key}: {value}\n")
                    else:
                        file.write(f"{data}\n")
            else:
                file.write("- No detailed findings available\n")
            file.write("\n")

    def _generate_recommendations(self, file):
        """Generate recommendations section"""
        file.write("\n" + "="*80 + "\n")
        file.write("RECOMMENDATIONS\n")
        file.write("="*80 + "\n\n")
        
        # General recommendations
        file.write("## General Recommendations\n")
        file.write("- Update all software to the latest versions\n")
        file.write("- Implement proper access controls\n")
        file.write("- Conduct regular security assessments\n")
        file.write("- Train employees on security best practices\n")
        file.write("- Implement a comprehensive security policy\n")
        file.write("- Enable and configure security logging\n")
        file.write("- Implement network segmentation\n")
        file.write("- Regular backup of critical data\n")
        file.write("- Implement incident response procedures\n")
        file.write("- Regular vulnerability scanning\n")
        
        # Stage-specific recommendations
        for stage, findings in self.findings.items():
            if findings:
                file.write(f"\n## {stage.replace('_', ' ').title()} Recommendations\n")
                if stage == "information_gathering":
                    file.write("- Implement proper DNS security measures\n")
                    file.write("- Configure web server security headers\n")
                    file.write("- Limit information disclosure in error messages\n")
                elif stage == "vulnerability_assessment":
                    file.write("- Regular vulnerability scanning\n")
                    file.write("- Implement patch management process\n")
                    file.write("- Configure secure default settings\n")
                elif stage == "exploitation":
                    file.write("- Implement proper input validation\n")
                    file.write("- Use secure coding practices\n")
                    file.write("- Regular security code reviews\n")
                elif stage == "post_exploitation":
                    file.write("- Implement proper access controls\n")
                    file.write("- Regular security audits\n")
                    file.write("- Monitor system changes\n")
                elif stage == "lateral_movement":
                    file.write("- Implement network segmentation\n")
                    file.write("- Use strong authentication\n")
                    file.write("- Monitor network traffic\n") 