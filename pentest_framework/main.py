#!/usr/bin/env python3
import os
import sys
import argparse
import logging
from datetime import datetime
from pathlib import Path

from utils.config import Config
from stages.exploitation import WindowsExploitation, LinuxExploitation
from stages.post_exploitation import PostExploitation

class PentestFramework:
    def __init__(self):
        # Setup logging
        self._setup_logging()
        
        # Initialize configuration
        self.config = Config()
        
        # Create reports directory
        self.reports_dir = "reports"
        if not os.path.exists(self.reports_dir):
            os.makedirs(self.reports_dir)
            
    def _setup_logging(self):
        """Setup logging configuration"""
        log_dir = "logs"
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
            
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = f"{log_dir}/pentest_{timestamp}.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler(sys.stdout)
            ]
        )
        
        self.logger = logging.getLogger(__name__)
        
    def run(self, target: str, os_type: str, credentials: dict = None):
        """Run the penetration testing framework"""
        self.logger.info(f"Starting penetration test for target: {target}")
        
        try:
            # Run exploitation
            self.logger.info("Starting exploitation phase...")
            if os_type.lower() == 'windows':
                exploitation = WindowsExploitation(target, self.logger, self.config)
            else:
                exploitation = LinuxExploitation(target, self.logger, self.config)
                
            exploitation_results = exploitation.run()
            
            # Run post-exploitation
            self.logger.info("Starting post-exploitation phase...")
            post_exploitation = PostExploitation(
                target,
                self.logger,
                os_type,
                credentials
            )
            post_exploitation_results = post_exploitation.run()
            
            # Generate report
            self._generate_report(target, os_type, exploitation_results, post_exploitation_results)
            
            self.logger.info("Penetration test completed successfully")
            
        except Exception as e:
            self.logger.error(f"Error during penetration test: {str(e)}")
            raise
            
    def _generate_report(self, target: str, os_type: str, exploitation_results: dict, post_exploitation_results: dict):
        """Generate penetration test report"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"{self.reports_dir}/{target}_{os_type}_{timestamp}.md"
        
        try:
            with open(report_file, 'w') as f:
                # Write report header
                f.write(f"# Penetration Test Report\n\n")
                f.write(f"## Target Information\n")
                f.write(f"- Target: {target}\n")
                f.write(f"- OS Type: {os_type}\n")
                f.write(f"- Test Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                
                # Write exploitation results
                f.write("## Exploitation Results\n\n")
                for category, findings in exploitation_results.items():
                    f.write(f"### {category.title()}\n")
                    if isinstance(findings, dict):
                        for key, value in findings.items():
                            f.write(f"- {key}: {value}\n")
                    elif isinstance(findings, list):
                        for item in findings:
                            f.write(f"- {item}\n")
                    f.write("\n")
                    
                # Write post-exploitation results
                f.write("## Post-Exploitation Results\n\n")
                for category, findings in post_exploitation_results.items():
                    f.write(f"### {category.title()}\n")
                    if isinstance(findings, dict):
                        for key, value in findings.items():
                            f.write(f"- {key}: {value}\n")
                    elif isinstance(findings, list):
                        for item in findings:
                            f.write(f"- {item}\n")
                    f.write("\n")
                    
            self.logger.info(f"Report generated: {report_file}")
            
        except Exception as e:
            self.logger.error(f"Error generating report: {str(e)}")
            
def main():
    parser = argparse.ArgumentParser(description="Penetration Testing Framework")
    parser.add_argument("target", help="Target IP address or hostname")
    parser.add_argument("--os", required=True, choices=['windows', 'linux'],
                       help="Target operating system (windows/linux)")
    parser.add_argument("--user", help="Username for authentication")
    parser.add_argument("--pass", dest="password", help="Password for authentication")
    
    args = parser.parse_args()
    
    # Prepare credentials if provided
    credentials = None
    if args.user and args.password:
        credentials = {
            'username': args.user,
            'password': args.password
        }
        
    # Run framework
    framework = PentestFramework()
    framework.run(args.target, args.os, credentials)
    
if __name__ == "__main__":
    main() 