#!/usr/bin/env python3
import os
import sys
import argparse
import logging
from datetime import datetime
from pathlib import Path
import json
import asyncio
from typing import Optional, Dict

# Add the project root to the Python path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

from pentest_framework.utils.config import Config
from pentest_framework.stages.exploitation import WindowsExploitation, LinuxExploitation
from pentest_framework.stages.post_exploitation import PostExploitation

class PentestFramework:
    def __init__(self, output_dir=None):
        # Initialize directories
        self.reports_dir = output_dir if output_dir else "reports"
        self.scans_dir = os.path.join(self.reports_dir, "scans")
        self.logs_dir = os.path.join(self.reports_dir, "logs")
        
        # Create necessary directories
        for directory in [self.reports_dir, self.scans_dir, self.logs_dir]:
            if not os.path.exists(directory):
                os.makedirs(directory)
        
        # Setup logging
        self._setup_logging()
        
        # Initialize configuration
        self.config = Config()
            
    def _setup_logging(self):
        """Setup logging configuration"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = f"{self.logs_dir}/pentest_{timestamp}.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler(sys.stdout)
            ]
        )
        
        self.logger = logging.getLogger(__name__)
        self.logger.info(f"Log file created: {log_file}")
        
    async def run(self, target: str, os_type: str, credentials: Optional[Dict[str, str]] = None) -> None:
        """Run the penetration test"""
        try:
            # Create timestamped directory for this run
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            run_dir = Path(self.reports_dir) / f"{target}_{os_type}_{timestamp}"
            run_dir.mkdir(parents=True, exist_ok=True)
            
            # Set up scan configuration
            scan_config = self.config.get_scan_config('output_dir', {})
            scan_config.update({
                'output_dir': str(run_dir),
                'logs_dir': str(run_dir / 'logs'),
                'reports_dir': str(run_dir)
            })
            self.config.update_config('scan', scan_config)
            
            # Initialize phases
            exploitation = WindowsExploitation(
                target,
                self.logger,
                self.config
            ) if os_type.lower() == 'windows' else LinuxExploitation(
                target,
                self.logger,
                self.config
            )
            
            post_exploitation = PostExploitation(
                target,
                self.logger,
                self.config
            )
            
            # Run phases
            await exploitation.run()
            await post_exploitation.run()
            
        except Exception as e:
            self.logger.error(f"Error during penetration test: {str(e)}")
            raise
            
    def _generate_reports(self, target: str, os_type: str, exploitation_results: dict, post_exploitation_results: dict, run_dir: str):
        """Generate penetration test reports in multiple formats"""
        try:
            # Generate Markdown report
            md_report = os.path.join(run_dir, "report.md")
            with open(md_report, 'w') as f:
                # Write report header
                f.write(f"# Penetration Test Report\n\n")
                f.write(f"## Target Information\n")
                f.write(f"- Target: {target}\n")
                f.write(f"- OS Type: {os_type}\n")
                f.write(f"- Test Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                
                # Write exploitation results
                f.write("## Exploitation Results\n\n")
                for category, findings in exploitation_results.items():
                    f.write(f"### {category.title()}\n")
                    if isinstance(findings, dict):
                        for key, value in findings.items():
                            if isinstance(value, str) and os.path.exists(value):
                                f.write(f"- {key}: [View File]({os.path.basename(value)})\n")
                            else:
                                f.write(f"- {key}: {value}\n")
                    elif isinstance(findings, list):
                        for item in findings:
                            f.write(f"- {item}\n")
                    f.write("\n")
                    
                # Write post-exploitation results
                f.write("## Post-Exploitation Results\n\n")
                for category, findings in post_exploitation_results.items():
                    f.write(f"### {category.title()}\n")
                    if isinstance(findings, dict):
                        for key, value in findings.items():
                            if isinstance(value, str) and os.path.exists(value):
                                f.write(f"- {key}: [View File]({os.path.basename(value)})\n")
                            else:
                                f.write(f"- {key}: {value}\n")
                    elif isinstance(findings, list):
                        for item in findings:
                            f.write(f"- {item}\n")
                    f.write("\n")
            
            # Generate JSON report
            json_report = os.path.join(run_dir, "report.json")
            with open(json_report, 'w') as f:
                json.dump({
                    'target': target,
                    'os_type': os_type,
                    'timestamp': datetime.now().isoformat(),
                    'exploitation_results': exploitation_results,
                    'post_exploitation_results': post_exploitation_results
                }, f, indent=4)
            
            # Generate HTML report
            html_report = os.path.join(run_dir, "report.html")
            with open(html_report, 'w') as f:
                f.write(f"""<!DOCTYPE html>
<html>
<head>
    <title>Penetration Test Report - {target}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        h1, h2, h3 {{ color: #333; }}
        .finding {{ margin: 10px 0; padding: 10px; border: 1px solid #ddd; }}
        .file-link {{ color: #0066cc; text-decoration: none; }}
        .file-link:hover {{ text-decoration: underline; }}
    </style>
</head>
<body>
    <h1>Penetration Test Report</h1>
    <h2>Target Information</h2>
    <ul>
        <li>Target: {target}</li>
        <li>OS Type: {os_type}</li>
        <li>Test Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</li>
    </ul>
""")
                
                # Write exploitation results
                f.write("<h2>Exploitation Results</h2>\n")
                for category, findings in exploitation_results.items():
                    f.write(f"<h3>{category.title()}</h3>\n")
                    if isinstance(findings, dict):
                        for key, value in findings.items():
                            if isinstance(value, str) and os.path.exists(value):
                                f.write(f'<div class="finding"><a href="{os.path.basename(value)}" class="file-link">{key}</a></div>\n')
                            else:
                                f.write(f'<div class="finding">{key}: {value}</div>\n')
                    elif isinstance(findings, list):
                        for item in findings:
                            f.write(f'<div class="finding">{item}</div>\n')
                
                # Write post-exploitation results
                f.write("<h2>Post-Exploitation Results</h2>\n")
                for category, findings in post_exploitation_results.items():
                    f.write(f"<h3>{category.title()}</h3>\n")
                    if isinstance(findings, dict):
                        for key, value in findings.items():
                            if isinstance(value, str) and os.path.exists(value):
                                f.write(f'<div class="finding"><a href="{os.path.basename(value)}" class="file-link">{key}</a></div>\n')
                            else:
                                f.write(f'<div class="finding">{key}: {value}</div>\n')
                    elif isinstance(findings, list):
                        for item in findings:
                            f.write(f'<div class="finding">{item}</div>\n')
                
                f.write("</body>\n</html>")
            
            self.logger.info(f"Reports generated in {run_dir}:")
            self.logger.info(f"- Markdown report: {md_report}")
            self.logger.info(f"- JSON report: {json_report}")
            self.logger.info(f"- HTML report: {html_report}")
            
        except Exception as e:
            self.logger.error(f"Error generating reports: {str(e)}")
            
def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(description='Penetration Testing Framework')
    parser.add_argument('target', help='Target IP address')
    parser.add_argument('--os', choices=['windows', 'linux'], required=True, help='Target OS')
    parser.add_argument('--user', help='Username for authentication')
    parser.add_argument('--pass', dest='password', help='Password for authentication')
    parser.add_argument('-o', '--output', help='Output directory for reports')
    
    args = parser.parse_args()
    
    # Set up credentials if provided
    credentials = {}
    if args.user:
        credentials['username'] = args.user
    if args.password:
        credentials['password'] = args.password
    
    # Initialize and run framework
    framework = PentestFramework(args.output)
    asyncio.run(framework.run(args.target, args.os, credentials))

if __name__ == '__main__':
    main() 