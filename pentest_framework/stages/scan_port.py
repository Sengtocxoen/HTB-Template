#!/usr/bin/env python3

import subprocess
import re
import sys
import argparse
import time
import os
from datetime import datetime

class HTBScanner:
    def __init__(self, target_ip, output_dir="scan_results"):
        self.target_ip = target_ip
        self.output_dir = output_dir
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.scan_files = {
            'initial': f"{output_dir}/initial_scan_{self.timestamp}.txt",
            'detailed': f"{output_dir}/detailed_scan_{self.timestamp}.txt",
            'ports_only': f"{output_dir}/open_ports_{self.timestamp}.txt"
        }
        
        # Create output directory
        os.makedirs(output_dir, exist_ok=True)
        
    def validate_ip(self):
        """Validate IP address format"""
        ip_pattern = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
        if not re.match(ip_pattern, self.target_ip):
            print(f"[!] Invalid IP address format: {self.target_ip}")
            return False
        return True
    
    def run_command(self, command, output_file=None):
        """Execute command and handle output"""
        print(f"[*] Executing: {command}")
        
        try:
            if output_file:
                with open(output_file, 'w') as f:
                    process = subprocess.run(
                        command.split(), 
                        stdout=f, 
                        stderr=subprocess.PIPE, 
                        text=True,
                        timeout=1800  # 30 minute timeout
                    )
            else:
                process = subprocess.run(
                    command.split(), 
                    capture_output=True, 
                    text=True,
                    timeout=1800
                )
            
            if process.returncode == 0:
                print(f"[+] Command completed successfully")
                return process.stdout if not output_file else True
            else:
                print(f"[!] Command failed with error: {process.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print(f"[!] Command timed out after 30 minutes")
            return False
        except Exception as e:
            print(f"[!] Error executing command: {e}")
            return False
    
    def initial_port_scan(self):
        """Phase 1: Fast port discovery scan"""
        print(f"\n{'='*60}")
        print(f"[*] Phase 1: Initial Port Discovery")
        print(f"[*] Target: {self.target_ip}")
        print(f"[*] Scanning all 65535 ports...")
        print(f"{'='*60}")
        
        # Fast initial scan to discover open ports
        nmap_cmd = f"nmap -p- --min-rate 10000 -T4 --open {self.target_ip}"
        
        start_time = time.time()
        result = self.run_command(nmap_cmd, self.scan_files['initial'])
        end_time = time.time()
        
        if result:
            print(f"[+] Initial scan completed in {end_time - start_time:.2f} seconds")
            print(f"[+] Results saved to: {self.scan_files['initial']}")
            return True
        else:
            print(f"[!] Initial scan failed")
            return False
    
    def extract_open_ports(self):
        """Extract open ports from initial scan results"""
        print(f"\n[*] Extracting open ports from initial scan...")
        
        try:
            with open(self.scan_files['initial'], 'r') as f:
                content = f.read()
            
            # Extract ports using regex
            port_pattern = r'(\d+)/tcp\s+open'
            matches = re.findall(port_pattern, content)
            
            if matches:
                open_ports = ','.join(matches)
                print(f"[+] Found {len(matches)} open ports: {open_ports}")
                
                # Save ports to file for reference
                with open(self.scan_files['ports_only'], 'w') as f:
                    f.write(f"Open ports on {self.target_ip}:\n")
                    f.write(f"{open_ports}\n")
                    f.write(f"\nIndividual ports:\n")
                    for port in matches:
                        f.write(f"{port}/tcp\n")
                
                return open_ports
            else:
                print(f"[!] No open ports found in scan results")
                return None
                
        except FileNotFoundError:
            print(f"[!] Initial scan file not found")
            return None
        except Exception as e:
            print(f"[!] Error extracting ports: {e}")
            return None
    
    def detailed_service_scan(self, ports):
        """Phase 2: Detailed service and version detection"""
        print(f"\n{'='*60}")
        print(f"[*] Phase 2: Detailed Service Enumeration")
        print(f"[*] Scanning ports: {ports}")
        print(f"{'='*60}")
        
        # Comprehensive service detection scan
        nmap_cmd = f"nmap -p{ports} -sVC -A -O --script=default,vuln {self.target_ip}"
        
        start_time = time.time()
        result = self.run_command(nmap_cmd, self.scan_files['detailed'])
        end_time = time.time()
        
        if result:
            print(f"[+] Detailed scan completed in {end_time - start_time:.2f} seconds")
            print(f"[+] Results saved to: {self.scan_files['detailed']}")
            return True
        else:
            print(f"[!] Detailed scan failed")
            return False
    
    def display_summary(self):
        """Display scan summary and key findings"""
        print(f"\n{'='*60}")
        print(f"[*] SCAN SUMMARY")
        print(f"{'='*60}")
        print(f"Target IP: {self.target_ip}")
        print(f"Scan timestamp: {self.timestamp}")
        print(f"Output directory: {self.output_dir}")
        
        print(f"\nGenerated files:")
        for scan_type, filepath in self.scan_files.items():
            if os.path.exists(filepath):
                size = os.path.getsize(filepath)
                print(f"  {scan_type.capitalize()}: {filepath} ({size} bytes)")
        
        # Extract key information from detailed scan
        try:
            with open(self.scan_files['detailed'], 'r') as f:
                content = f.read()
            
            print(f"\n[*] Key Findings:")
            
            # Extract service information
            service_pattern = r'(\d+)/tcp\s+open\s+(\S+)(?:\s+(.+?))?(?:\n|$)'
            services = re.findall(service_pattern, content, re.MULTILINE)
            
            if services:
                print(f"  Services detected:")
                for port, service, version in services:
                    version_info = version.strip() if version else "Unknown version"
                    print(f"    Port {port}: {service} - {version_info}")
            
            # Look for potential vulnerabilities
            if "VULNERABLE" in content:
                print(f"\n  [!] Potential vulnerabilities detected - review detailed scan")
            
        except Exception as e:
            print(f"[!] Error reading detailed scan results: {e}")
        
        print(f"\n[+] Reconnaissance phase completed successfully!")
        print(f"[*] Next steps: Review detailed scan results and plan exploitation phase")
    
    def run_full_scan(self):
        """Execute complete scanning workflow"""
        print(f"HTB Automated Scanner - Starting reconnaissance phase")
        print(f"Target: {self.target_ip}")
        
        if not self.validate_ip():
            return False
        
        # Phase 1: Initial port discovery
        if not self.initial_port_scan():
            return False
        
        # Extract open ports
        open_ports = self.extract_open_ports()
        if not open_ports:
            print(f"[!] No open ports found - scan complete")
            return False
        
        # Phase 2: Detailed service enumeration
        if not self.detailed_service_scan(open_ports):
            return False
        
        # Display summary
        self.display_summary()
        return True

def main():
    parser = argparse.ArgumentParser(
        description="HTB Automated Nmap Scanner - Comprehensive reconnaissance tool",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python3 htb_scanner.py 10.10.10.10
  python3 htb_scanner.py 192.168.1.100 -o custom_output
  
Security Note: Only use on authorized targets
        """
    )
    
    parser.add_argument('target', help='Target IP address to scan')
    parser.add_argument('-o', '--output', default='scan_results', 
                       help='Output directory (default: scan_results)')
    
    args = parser.parse_args()
    
    # Initialize scanner
    scanner = HTBScanner(args.target, args.output)
    
    # Run complete scan workflow
    success = scanner.run_full_scan()
    
    if success:
        sys.exit(0)
    else:
        print(f"\n[!] Scan workflow failed")
        sys.exit(1)

if __name__ == "__main__":
    main()