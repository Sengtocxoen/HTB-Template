#!/usr/bin/env python3
import os
import yaml
import logging
from typing import Dict, Any, Optional, List

class ConfigManager:
    def __init__(self, config_dir: str = "config", logger: Optional[logging.Logger] = None):
        self.config_dir = config_dir
        self.logger = logger or logging.getLogger(__name__)
        self.profiles_dir = os.path.join(config_dir, "profiles")
        self.scan_profiles: Dict[str, Dict[str, Any]] = {}
        self.load_profiles()
    
    def load_profiles(self) -> None:
        """Load all scan profiles from the profiles directory"""
        if not os.path.exists(self.profiles_dir):
            os.makedirs(self.profiles_dir)
            self._create_default_profiles()
            
        for profile_file in os.listdir(self.profiles_dir):
            if profile_file.endswith(".yaml"):
                profile_name = profile_file[:-5]  # Remove .yaml extension
                self.scan_profiles[profile_name] = self.load_profile(profile_name)
    
    def _create_default_profiles(self) -> None:
        """Create default scan profiles"""
        default_profiles = {
            "web_application.yaml": {
                "name": "Web Application Assessment",
                "description": "Comprehensive testing for web applications",
                "stages": {
                    "information_gathering": {
                        "tools": ["subfinder", "whatweb", "wafw00f"],
                        "options": {
                            "subfinder": "-d {target} -o {output}",
                            "whatweb": "-a 3 {target}",
                            "wafw00f": "{target}"
                        }
                    },
                    "vulnerability_assessment": {
                        "tools": ["nuclei", "zap-baseline"],
                        "options": {
                            "nuclei": "-target {target} -severity critical,high",
                            "zap-baseline": "-t {target} -g gen.conf -r testreport.html"
                        }
                    },
                    "exploitation": {
                        "tools": ["sqlmap", "xssstrike"],
                        "options": {
                            "sqlmap": "-u {target} --forms --batch --dbs",
                            "xssstrike": "-u {target} --crawl"
                        }
                    }
                }
            },
            "network.yaml": {
                "name": "Network Infrastructure Assessment",
                "description": "Comprehensive testing for network infrastructure",
                "stages": {
                    "information_gathering": {
                        "tools": ["nmap", "masscan"],
                        "options": {
                            "nmap": "-sV -sC -p- {target}",
                            "masscan": "-p1-65535 {target} --rate=1000"
                        }
                    },
                    "vulnerability_assessment": {
                        "tools": ["nmap-vuln", "openvas"],
                        "options": {
                            "nmap-vuln": "--script vuln {target}",
                            "openvas": "--target {target} --scan-config Full and fast"
                        }
                    }
                }
            }
        }
        
        for filename, content in default_profiles.items():
            with open(os.path.join(self.profiles_dir, filename), "w") as f:
                yaml.dump(content, f, default_flow_style=False)
    
    def load_profile(self, profile_name: str) -> Dict[str, Any]:
        """Load a specific scan profile"""
        profile_path = os.path.join(self.profiles_dir, f"{profile_name}.yaml")
        try:
            with open(profile_path, "r") as f:
                return yaml.safe_load(f)
        except Exception as e:
            self.logger.error(f"Error loading profile {profile_name}: {str(e)}")
            return {}
    
    def get_profile(self, profile_name: str) -> Optional[Dict[str, Any]]:
        """Get a specific scan profile"""
        return self.scan_profiles.get(profile_name)
    
    def get_available_profiles(self) -> List[str]:
        """Get list of available scan profiles"""
        return list(self.scan_profiles.keys())
    
    def create_profile(self, profile_name: str, profile_data: Dict[str, Any]) -> bool:
        """Create a new scan profile"""
        try:
            profile_path = os.path.join(self.profiles_dir, f"{profile_name}.yaml")
            with open(profile_path, "w") as f:
                yaml.dump(profile_data, f, default_flow_style=False)
            self.scan_profiles[profile_name] = profile_data
            return True
        except Exception as e:
            self.logger.error(f"Error creating profile {profile_name}: {str(e)}")
            return False
    
    def update_profile(self, profile_name: str, profile_data: Dict[str, Any]) -> bool:
        """Update an existing scan profile"""
        if profile_name not in self.scan_profiles:
            self.logger.error(f"Profile {profile_name} does not exist")
            return False
            
        try:
            profile_path = os.path.join(self.profiles_dir, f"{profile_name}.yaml")
            with open(profile_path, "w") as f:
                yaml.dump(profile_data, f, default_flow_style=False)
            self.scan_profiles[profile_name] = profile_data
            return True
        except Exception as e:
            self.logger.error(f"Error updating profile {profile_name}: {str(e)}")
            return False 