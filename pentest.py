#!/usr/bin/env python3
# Security Assessment Framework - Comprehensive Penetration Testing Tool
# This script organizes and documents a full penetration testing workflow

import os
import sys
import json
import time
import argparse
import subprocess
from datetime import datetime
from colorama import Fore, Style, init

# Initialize colorama
init()

class PenTestFramework:
    def __init__(self, target, output_dir="reports"):
        self.target = target
        self.output_dir = output_dir
        self.timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        self.report_file = f"{output_dir}/pentest_report_{self.timestamp}.txt"
        self.findings = {
            "information_gathering": {},
            "vulnerability_assessment": {},
            "exploitation": {},
            "post_exploitation": {},
            "lateral_movement": {}
        }
        
        # Create output directory if it doesn't exist
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        # Initialize report file
        with open(self.report_file, "w") as f:
            f.write(f"# Penetration Test Report for {target}\n")
            f.write(f"# Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")

    def log(self, message, level="INFO"):
        """Log messages with timestamp and level"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Color-code based on level
        if level == "INFO":
            color = Fore.BLUE
        elif level == "WARNING":
            color = Fore.YELLOW
        elif level == "ERROR":
            color = Fore.RED
        elif level == "SUCCESS":
            color = Fore.GREEN
        else:
            color = Style.RESET_ALL
            
        formatted_msg = f"[{timestamp}] [{level}] {message}"
        print(f"{color}{formatted_msg}{Style.RESET_ALL}")
        
        # Write to report file
        with open(self.report_file, "a") as f:
            f.write(f"{formatted_msg}\n")
            
    def run_command(self, command, capture_output=True, shell=False):
        """Run a system command and return the output"""
        self.log(f"Running command: {command}", "INFO")
        
        try:
            if isinstance(command, list) and not shell:
                result = subprocess.run(command, capture_output=capture_output, text=True, shell=shell)
            else:
                result = subprocess.run(command, capture_output=capture_output, text=True, shell=True)
                
            if result.returncode != 0:
                self.log(f"Command failed with error: {result.stderr}", "ERROR")
                return None
                
            return result.stdout if capture_output else "Command executed successfully"
            
        except Exception as e:
            self.log(f"Error executing command: {str(e)}", "ERROR")
            return None

    #################################################
    # STAGE 1: INFORMATION GATHERING
    #################################################
    
    def information_gathering(self):
        """Perform information gathering on the target"""
        self.log("\n" + "="*80, "INFO")
        self.log("STAGE 1: INFORMATION GATHERING", "INFO")
        self.log("="*80 + "\n", "INFO")
        
        # 1. DNS Enumeration using host and dig
        self.log("Performing DNS enumeration...", "INFO")
        dns_info = self.dns_enumeration()
        self.findings["information_gathering"]["dns"] = dns_info
        
        # 2. Network scanning using Nmap
        self.log("Performing network scan with Nmap...", "INFO")
        nmap_results = self.nmap_scan()
        self.findings["information_gathering"]["nmap"] = nmap_results
        
        # 3. Web technology identification (like Wappalyzer or whatweb)
        self.log("Identifying web technologies...", "INFO")
        web_tech = self.identify_web_technologies()
        self.findings["information_gathering"]["web_technologies"] = web_tech
        
        # 4. Directory and file enumeration
        self.log("Enumerating directories and files...", "INFO")
        directories = self.directory_enumeration()
        self.findings["information_gathering"]["directories"] = directories
        
        # 5. Subdomain enumeration
        self.log("Enumerating subdomains...", "INFO")
        subdomains = self.subdomain_enumeration()
        self.findings["information_gathering"]["subdomains"] = subdomains
        
        # Document findings
        self.log("Information gathering complete. Findings documented.", "SUCCESS")
        return self.findings["information_gathering"]
    
    def dns_enumeration(self):
        """Perform DNS enumeration using host and dig commands"""
        results = {}
        
        # Using host for basic DNS lookup
        host_result = self.run_command(["host", self.target])
        if host_result:
            results["host"] = host_result
            
        # Using dig for more detailed DNS information
        dig_a = self.run_command(["dig", "A", self.target])
        dig_mx = self.run_command(["dig", "MX", self.target])
        dig_ns = self.run_command(["dig", "NS", self.target])
        
        if dig_a: results["dig_a"] = dig_a
        if dig_mx: results["dig_mx"] = dig_mx
        if dig_ns: results["dig_ns"] = dig_ns
        
        return results
    
    def nmap_scan(self):
        """Perform network scanning using Nmap"""
        results = {}
        
        # Basic Nmap scan
        self.log("Performing basic Nmap scan...", "INFO")
        nmap_basic = self.run_command(f"nmap -sV -sC -oN {self.output_dir}/nmap_basic_{self.timestamp}.txt {self.target}")
        if nmap_basic:
            results["basic_scan"] = nmap_basic
            
        # Full port scan (simulated - in real scenario this would scan all ports)
        self.log("Performing full port scan (simulated)...", "INFO")
        nmap_all_ports = self.run_command(f"nmap -p 1-1000 -oN {self.output_dir}/nmap_ports_{self.timestamp}.txt {self.target}")
        if nmap_all_ports:
            results["port_scan"] = nmap_all_ports
            
        # UDP scan (simulated)
        self.log("Performing UDP scan (simulated)...", "INFO")
        nmap_udp = self.run_command(f"nmap -sU --top-ports 20 -oN {self.output_dir}/nmap_udp_{self.timestamp}.txt {self.target}")
        if nmap_udp:
            results["udp_scan"] = nmap_udp
            
        return results
    
    def identify_web_technologies(self):
        """Identify web technologies in use on the target"""
        results = {}
        
        # Using whatweb
        whatweb_result = self.run_command(f"whatweb -v {self.target}")
        if whatweb_result:
            results["whatweb"] = whatweb_result
            
        # Nikto scan (simulated)
        self.log("Performing Nikto scan...", "INFO")
        nikto_result = self.run_command(f"nikto -h {self.target} -output {self.output_dir}/nikto_{self.timestamp}.txt")
        if nikto_result:
            results["nikto"] = nikto_result
            
        return results
    
    def directory_enumeration(self):
        """Enumerate directories and files on the web server"""
        results = {}
        
        # Using gobuster
        self.log("Running gobuster for directory enumeration...", "INFO")
        gobuster_result = self.run_command(f"gobuster dir -u {self.target} -w /usr/share/wordlists/dirb/common.txt -o {self.output_dir}/gobuster_{self.timestamp}.txt")
        if gobuster_result:
            results["gobuster"] = gobuster_result
            
        return results
    
    def subdomain_enumeration(self):
        """Enumerate subdomains of the target"""
        results = {}
        
        # Using Subfinder (simulated)
        self.log("Enumerating subdomains with Subfinder (simulated)...", "INFO")
        subdomain_result = self.run_command(f"echo 'Subfinder would run: subfinder -d {self.target} -o {self.output_dir}/subdomains_{self.timestamp}.txt'")
        if subdomain_result:
            results["subfinder"] = subdomain_result
            
        return results

    #################################################
    # STAGE 2: VULNERABILITY ASSESSMENT
    #################################################
    
    def vulnerability_assessment(self):
        """Perform vulnerability assessment on the target"""
        self.log("\n" + "="*80, "INFO")
        self.log("STAGE 2: VULNERABILITY ASSESSMENT", "INFO")
        self.log("="*80 + "\n", "INFO")
        
        # 1. Web vulnerability scanning
        self.log("Performing web vulnerability scan...", "INFO")
        web_vulns = self.web_vulnerability_scan()
        self.findings["vulnerability_assessment"]["web_vulnerabilities"] = web_vulns
        
        # 2. Check for common misconfigurations
        self.log("Checking for common misconfigurations...", "INFO")
        misconfigs = self.check_misconfigurations()
        self.findings["vulnerability_assessment"]["misconfigurations"] = misconfigs
        
        # 3. Check for outdated software and known vulnerabilities
        self.log("Checking for outdated software and known vulnerabilities...", "INFO")
        cve_check = self.check_known_vulnerabilities()
        self.findings["vulnerability_assessment"]["known_vulnerabilities"] = cve_check
        
        # Document findings
        self.log("Vulnerability assessment complete. Findings documented.", "SUCCESS")
        return self.findings["vulnerability_assessment"]
    
    def web_vulnerability_scan(self):
        """Scan for web vulnerabilities using various tools"""
        results = {}
        
        # Using OWASP ZAP (simulated)
        self.log("Performing scan with OWASP ZAP (simulated)...", "INFO")
        zap_result = self.run_command(f"echo 'ZAP would run: zap-cli quick-scan --self-contained --start-options \"-config api.disablekey=true\" -o '-config api.addrs.addr.name=.* -config api.addrs.addr.regex=true' {self.target}'")
        if zap_result:
            results["zap"] = zap_result
            
        # SQL injection testing (simulated)
        self.log("Testing for SQL injection vulnerabilities (simulated)...", "INFO")
        sqlmap_result = self.run_command(f"echo 'SQLMap would run: sqlmap -u {self.target} --forms --batch --dbs'")
        if sqlmap_result:
            results["sqlmap"] = sqlmap_result
            
        # XSS testing (simulated)
        self.log("Testing for XSS vulnerabilities (simulated)...", "INFO")
        xss_result = self.run_command(f"echo 'XSStrike would run: python xsstrike.py -u {self.target}'")
        if xss_result:
            results["xsstrike"] = xss_result
            
        return results
    
    def check_misconfigurations(self):
        """Check for common security misconfigurations"""
        results = {}
        
        # SSL/TLS misconfiguration check (simulated)
        self.log("Checking SSL/TLS configuration (simulated)...", "INFO")
        ssl_result = self.run_command(f"echo 'SSLyze would run: sslyze --regular {self.target}'")
        if ssl_result:
            results["sslyze"] = ssl_result
            
        # Security headers check (simulated)
        self.log("Checking security headers (simulated)...", "INFO")
        headers_result = self.run_command(f"echo 'Would check security headers for {self.target}'")
        if headers_result:
            results["security_headers"] = headers_result
            
        # CORS misconfiguration check (simulated)
        self.log("Checking CORS configuration (simulated)...", "INFO")
        cors_result = self.run_command(f"echo 'Would check CORS configuration for {self.target}'")
        if cors_result:
            results["cors"] = cors_result
            
        return results
    
    def check_known_vulnerabilities(self):
        """Check for known vulnerabilities based on identified technologies"""
        results = {}
        
        # Vulnerability database lookup (simulated)
        self.log("Checking vulnerability databases (simulated)...", "INFO")
        vuln_db_result = self.run_command(f"echo 'Would check vulnerability databases for technologies identified on {self.target}'")
        if vuln_db_result:
            results["vulnerability_database"] = vuln_db_result
            
        # Searchsploit lookup (simulated)
        self.log("Checking Exploit-DB with searchsploit (simulated)...", "INFO")
        searchsploit_result = self.run_command(f"echo 'Searchsploit would run: searchsploit Apache 2.4'")
        if searchsploit_result:
            results["searchsploit"] = searchsploit_result
            
        return results

    #################################################
    # STAGE 3: EXPLOITATION
    #################################################
    
    def exploitation(self):
        """Perform exploitation on identified vulnerabilities"""
        self.log("\n" + "="*80, "INFO")
        self.log("STAGE 3: EXPLOITATION", "INFO")
        self.log("="*80 + "\n", "INFO")
        
        # 1. Prepare exploitation environment
        self.log("Preparing exploitation environment...", "INFO")
        prep_result = self.prepare_exploitation()
        self.findings["exploitation"]["preparation"] = prep_result
        
        # 2. Web exploitation
        self.log("Attempting web exploitation...", "INFO")
        web_exploit = self.web_exploitation()
        self.findings["exploitation"]["web"] = web_exploit
        
        # 3. Network exploitation
        self.log("Attempting network exploitation...", "INFO")
        network_exploit = self.network_exploitation()
        self.findings["exploitation"]["network"] = network_exploit
        
        # Document findings
        self.log("Exploitation attempts complete. Findings documented.", "SUCCESS")
        return self.findings["exploitation"]
    
    def prepare_exploitation(self):
        """Prepare the exploitation environment"""
        results = {}
        
        # Set up necessary tools and payloads (simulated)
        self.log("Setting up tools and payloads (simulated)...", "INFO")
        setup_result = self.run_command(f"echo 'Would set up exploitation tools and payloads for {self.target}'")
        if setup_result:
            results["setup"] = setup_result
            
        return results
    
    def web_exploitation(self):
        """Perform web-based exploitation"""
        results = {}
        
        # SQL injection exploitation (simulated)
        self.log("Attempting SQL injection exploitation (simulated)...", "INFO")
        sql_exploit = self.run_command(f"echo 'Would attempt SQL injection exploitation on {self.target}'")
        if sql_exploit:
            results["sql_injection"] = sql_exploit
            
        # File upload vulnerability exploitation (simulated)
        self.log("Attempting file upload exploitation (simulated)...", "INFO")
        upload_exploit = self.run_command(f"echo 'Would attempt file upload exploitation on {self.target}'")
        if upload_exploit:
            results["file_upload"] = upload_exploit
            
        # Command injection exploitation (simulated)
        self.log("Attempting command injection exploitation (simulated)...", "INFO")
        cmd_exploit = self.run_command(f"echo 'Would attempt command injection exploitation on {self.target}'")
        if cmd_exploit:
            results["command_injection"] = cmd_exploit
            
        return results
    
    def network_exploitation(self):
        """Perform network-based exploitation"""
        results = {}
        
        # Metasploit exploitation (simulated)
        self.log("Attempting Metasploit exploitation (simulated)...", "INFO")
        msf_exploit = self.run_command(f"echo 'Would use Metasploit for exploitation of {self.target}'")
        if msf_exploit:
            results["metasploit"] = msf_exploit
            
        return results

    #################################################
    # STAGE 4: POST-EXPLOITATION
    #################################################
    
    def post_exploitation(self):
        """Perform post-exploitation activities"""
        self.log("\n" + "="*80, "INFO")
        self.log("STAGE 4: POST-EXPLOITATION", "INFO")
        self.log("="*80 + "\n", "INFO")
        
        # 1. Information gathering within the compromised system
        self.log("Gathering information from compromised system (simulated)...", "INFO")
        internal_info = self.internal_information_gathering()
        self.findings["post_exploitation"]["internal_information"] = internal_info
        
        # 2. Privilege escalation attempts
        self.log("Attempting privilege escalation (simulated)...", "INFO")
        privesc = self.privilege_escalation()
        self.findings["post_exploitation"]["privilege_escalation"] = privesc
        
        # 3. Data exfiltration (simulated)
        self.log("Simulating data exfiltration process...", "INFO")
        exfil = self.data_exfiltration()
        self.findings["post_exploitation"]["data_exfiltration"] = exfil
        
        # Document findings
        self.log("Post-exploitation activities complete. Findings documented.", "SUCCESS")
        return self.findings["post_exploitation"]
    
    def internal_information_gathering(self):
        """Gather information from within the compromised system"""
        results = {}
        
        # System information gathering (simulated)
        self.log("Gathering system information (simulated)...", "INFO")
        sysinfo = self.run_command(f"echo 'Would gather system information from {self.target}'")
        if sysinfo:
            results["system_info"] = sysinfo
            
        # User information gathering (simulated)
        self.log("Gathering user information (simulated)...", "INFO")
        userinfo = self.run_command(f"echo 'Would gather user information from {self.target}'")
        if userinfo:
            results["user_info"] = userinfo
            
        # Network information gathering (simulated)
        self.log("Gathering network information (simulated)...", "INFO")
        netinfo = self.run_command(f"echo 'Would gather network information from {self.target}'")
        if netinfo:
            results["network_info"] = netinfo
            
        return results
    
    def privilege_escalation(self):
        """Attempt privilege escalation on the compromised system"""
        results = {}
        
        # Kernel exploit check (simulated)
        self.log("Checking for kernel exploits (simulated)...", "INFO")
        kernel_check = self.run_command(f"echo 'Would check for kernel exploits on {self.target}'")
        if kernel_check:
            results["kernel_exploits"] = kernel_check
            
        # Misconfiguration check for privilege escalation (simulated)
        self.log("Checking for misconfigurations that could lead to privilege escalation (simulated)...", "INFO")
        misconfig_check = self.run_command(f"echo 'Would check for misconfigurations on {self.target}'")
        if misconfig_check:
            results["misconfigurations"] = misconfig_check
            
        # SUDO abuse check (simulated)
        self.log("Checking for SUDO abuse possibilities (simulated)...", "INFO")
        sudo_check = self.run_command(f"echo 'Would check for SUDO abuse possibilities on {self.target}'")
        if sudo_check:
            results["sudo_abuse"] = sudo_check
            
        return results
    
    def data_exfiltration(self):
        """Simulate data exfiltration from the compromised system"""
        results = {}
        
        # Sensitive file identification (simulated)
        self.log("Identifying sensitive files (simulated)...", "INFO")
        files = self.run_command(f"echo 'Would identify sensitive files on {self.target}'")
        if files:
            results["sensitive_files"] = files
            
        # Database dump (simulated)
        self.log("Attempting database dump (simulated)...", "INFO")
        db_dump = self.run_command(f"echo 'Would attempt database dump from {self.target}'")
        if db_dump:
            results["database_dump"] = db_dump
            
        return results

    #################################################
    # STAGE 5: LATERAL MOVEMENT
    #################################################
    
    def lateral_movement(self):
        """Perform lateral movement to other systems in the network"""
        self.log("\n" + "="*80, "INFO")
        self.log("STAGE 5: LATERAL MOVEMENT", "INFO")
        self.log("="*80 + "\n", "INFO")
        
        # 1. Network discovery from compromised host
        self.log("Performing network discovery from compromised host (simulated)...", "INFO")
        net_discovery = self.internal_network_discovery()
        self.findings["lateral_movement"]["network_discovery"] = net_discovery
        
        # 2. Credential harvesting
        self.log("Harvesting credentials (simulated)...", "INFO")
        creds = self.credential_harvesting()
        self.findings["lateral_movement"]["credentials"] = creds
        
        # 3. Lateral movement techniques
        self.log("Attempting lateral movement (simulated)...", "INFO")
        movement = self.movement_techniques()
        self.findings["lateral_movement"]["techniques"] = movement
        
        # Document findings
        self.log("Lateral movement activities complete. Findings documented.", "SUCCESS")
        return self.findings["lateral_movement"]
    
    def internal_network_discovery(self):
        """Discover other systems in the internal network"""
        results = {}
        
        # Internal port scanning (simulated)
        self.log("Performing internal port scanning (simulated)...", "INFO")
        internal_scan = self.run_command(f"echo 'Would perform internal port scanning from {self.target}'")
        if internal_scan:
            results["internal_scan"] = internal_scan
            
        # ARP scanning (simulated)
        self.log("Performing ARP scanning (simulated)...", "INFO")
        arp_scan = self.run_command(f"echo 'Would perform ARP scanning from {self.target}'")
        if arp_scan:
            results["arp_scan"] = arp_scan
            
        return results
    
    def credential_harvesting(self):
        """Harvest credentials from the compromised system"""
        results = {}
        
        # Memory credential dumping (simulated)
        self.log("Attempting memory credential dump (simulated)...", "INFO")
        memory_dump = self.run_command(f"echo 'Would attempt memory credential dumping on {self.target}'")
        if memory_dump:
            results["memory_dump"] = memory_dump
            
        # Configuration file search (simulated)
        self.log("Searching for credentials in configuration files (simulated)...", "INFO")
        config_search = self.run_command(f"echo 'Would search for credentials in configuration files on {self.target}'")
        if config_search:
            results["config_search"] = config_search
            
        return results
    
    def movement_techniques(self):
        """Attempt lateral movement using various techniques"""
        results = {}
        
        # Pass-the-hash attack (simulated)
        self.log("Attempting pass-the-hash attack (simulated)...", "INFO")
        pth = self.run_command(f"echo 'Would attempt pass-the-hash attack from {self.target}'")
        if pth:
            results["pass_the_hash"] = pth
            
        # SSH key reuse (simulated)
        self.log("Checking for SSH key reuse (simulated)...", "INFO")
        ssh_key = self.run_command(f"echo 'Would check for SSH key reuse on {self.target}'")
        if ssh_key:
            results["ssh_key_reuse"] = ssh_key
            
        # Token impersonation (simulated)
        self.log("Attempting token impersonation (simulated)...", "INFO")
        token = self.run_command(f"echo 'Would attempt token impersonation on {self.target}'")
        if token:
            results["token_impersonation"] = token
            
        return results

    #################################################
    # REPORTING
    #################################################
    
    def generate_report(self):
        """Generate the final penetration test report"""
        self.log("\n" + "="*80, "INFO")
        self.log("GENERATING FINAL REPORT", "INFO")
        self.log("="*80 + "\n", "INFO")
        
        # Save findings to JSON file
        findings_file = f"{self.output_dir}/findings_{self.timestamp}.json"
        with open(findings_file, "w") as f:
            json.dump(self.findings, f, indent=4)
            
        self.log(f"Detailed findings saved to {findings_file}", "SUCCESS")
        
        # Generate executive summary
        self.log("Generating executive summary...", "INFO")
        self._generate_executive_summary()
        
        self.log(f"Final report saved to {self.report_file}", "SUCCESS")
        
    def _generate_executive_summary(self):
        """Generate an executive summary of the penetration test"""
        with open(self.report_file, "a") as f:
            f.write("\n\n")
            f.write("="*80 + "\n")
            f.write("EXECUTIVE SUMMARY\n")
            f.write("="*80 + "\n\n")
            
            # Information Gathering Summary
            f.write("## Information Gathering\n")
            if self.findings["information_gathering"]:
                for category, data in self.findings["information_gathering"].items():
                    f.write(f"- {category.replace('_', ' ').title()}: ")
                    if data:
                        f.write("Information collected successfully\n")
                    else:
                        f.write("No information collected\n")
            else:
                f.write("- No information gathering performed\n")
                
            f.write("\n")
            
            # Vulnerability Assessment Summary
            f.write("## Vulnerability Assessment\n")
            if self.findings["vulnerability_assessment"]:
                for category, data in self.findings["vulnerability_assessment"].items():
                    f.write(f"- {category.replace('_', ' ').title()}: ")
                    if data:
                        f.write("Vulnerabilities identified\n")
                    else:
                        f.write("No vulnerabilities identified\n")
            else:
                f.write("- No vulnerability assessment performed\n")
                
            f.write("\n")
            
            # Exploitation Summary
            f.write("## Exploitation\n")
            if self.findings["exploitation"]:
                for category, data in self.findings["exploitation"].items():
                    f.write(f"- {category.replace('_', ' ').title()}: ")
                    if data:
                        f.write("Exploitation successful\n")
                    else:
                        f.write("Exploitation failed\n")
            else:
                f.write("- No exploitation performed\n")
                
            f.write("\n")
            
            # Post-Exploitation Summary
            f.write("## Post-Exploitation\n")
            if self.findings["post_exploitation"]:
                for category, data in self.findings["post_exploitation"].items():
                    f.write(f"- {category.replace('_', ' ').title()}: ")
                    if data:
                        f.write("Activities performed successfully\n")
                    else:
                        f.write("Activities failed\n")
            else:
                f.write("- No post-exploitation performed\n")
                
            f.write("\n")
            
            # Lateral Movement Summary
            f.write("## Lateral Movement\n")
            if self.findings["lateral_movement"]:
                for category, data in self.findings["lateral_movement"].items():
                    f.write(f"- {category.replace('_', ' ').title()}: ")
                    if data:
                        f.write("Movement successful\n")
                    else:
                        f.write("Movement failed\n")
            else:
                f.write("- No lateral movement performed\n")
                
            f.write("\n")
            
            # Recommendations (would be more detailed in a real report)
            f.write("## Recommendations\n")
            f.write("- Update all software to the latest versions\n")
            f.write("- Implement proper access controls\n")
            f.write("- Conduct regular security assessments\n")
            f.write("- Train employees on security best practices\n")
            f.write("- Implement a comprehensive security policy\n")

    #################################################
    # MAIN EXECUTION
    #################################################
    
    def run_all(self):
        """Run all stages of the penetration test"""
        try:
            # Stage 1: Information Gathering
            self.information_gathering()
            
            # Stage 2: Vulnerability Assessment
            self.vulnerability_assessment()
            
            # Stage 3: Exploitation
            self.exploitation()
            
            # Stage 4: Post-Exploitation
            self.post_exploitation()
            
            # Stage 5: Lateral Movement
            self.lateral_movement()
            
            # Generate final report
            self.generate_report()
            
            self.log("Penetration test completed successfully.", "SUCCESS")
            
        except Exception as e:
            self.log(f"Error during penetration test: {str(e)}", "ERROR")
            raise

if __name__ == "__main__":
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="Penetration Testing Framework")
    parser.add_argument("target", help="Target URL or IP address")
    parser.add_argument("-o", "--output", default="reports", help="Output directory for reports")
    args = parser.parse_args()
    
    # Run the penetration test
    pentest = PenTestFramework(args.target, args.output)
    pentest.run_all()