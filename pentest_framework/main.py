#!/usr/bin/env python3
import os
import sys
import json
import argparse
import logging
from datetime import datetime
from colorama import Fore, Style, init

# Import framework stages
from stages.information_gathering import InformationGathering
from stages.vulnerability_assessment import VulnerabilityAssessment
from stages.exploitation import Exploitation
from stages.post_exploitation import PostExploitation
from stages.lateral_movement import LateralMovement

# Import utility components
from utils.tool_manager import ToolManager
from utils.config_manager import ConfigManager
from utils.execution_engine import ExecutionEngine

# Initialize colorama
init()

class PenTestFramework:
    def __init__(self, target, output_dir="reports", profile="default"):
        self.target = target
        self.output_dir = output_dir
        self.timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        self.report_file = f"{output_dir}/pentest_report_{self.timestamp}.txt"
        
        # Set up logging
        self._setup_logging()
        
        # Initialize components
        self.tool_manager = ToolManager(self.logger)
        self.config_manager = ConfigManager(logger=self.logger)
        self.execution_engine = ExecutionEngine(logger=self.logger)
        
        # Load scan profile
        self.profile = self.config_manager.get_profile(profile)
        if not self.profile:
            self.logger.warning(f"Profile '{profile}' not found, using default profile")
            self.profile = self.config_manager.get_profile("web_application")
        
        # Create output directory
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
            
        # Initialize findings
        self.findings = {
            "information_gathering": {},
            "vulnerability_assessment": {},
            "exploitation": {},
            "post_exploitation": {},
            "lateral_movement": {}
        }

    def _setup_logging(self):
        """Set up logging configuration"""
        self.logger = logging.getLogger("PenTestFramework")
        self.logger.setLevel(logging.INFO)
        
        # Console handler with colors
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        
        # Custom formatter with colors
        class ColoredFormatter(logging.Formatter):
            def format(self, record):
                if record.levelno == logging.INFO:
                    color = Fore.BLUE
                elif record.levelno == logging.WARNING:
                    color = Fore.YELLOW
                elif record.levelno == logging.ERROR:
                    color = Fore.RED
                elif record.levelno == logging.SUCCESS:
                    color = Fore.GREEN
                else:
                    color = Style.RESET_ALL
                    
                record.msg = f"{color}{record.msg}{Style.RESET_ALL}"
                return super().format(record)
        
        formatter = ColoredFormatter('%(asctime)s - %(levelname)s - %(message)s')
        console_handler.setFormatter(formatter)
        
        # File handler
        file_handler = logging.FileHandler(self.report_file)
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        
        self.logger.addHandler(console_handler)
        self.logger.addHandler(file_handler)

    def run_all(self, stages=None):
        """Run specified stages of the penetration test"""
        try:
            self.logger.info(f"Starting penetration test against target: {self.target}")
            
            # Verify required tools
            missing_tools = self.tool_manager.get_missing_tools()
            if missing_tools:
                self.logger.warning(f"Missing required tools: {', '.join(missing_tools)}")
                self.logger.warning("Some functionality may be limited")
            
            # Define available stages
            available_stages = {
                1: ("Information Gathering", InformationGathering),
                2: ("Vulnerability Assessment", VulnerabilityAssessment),
                3: ("Exploitation", Exploitation),
                4: ("Post-Exploitation", PostExploitation),
                5: ("Lateral Movement", LateralMovement)
            }
            
            # If no stages specified, run all
            if not stages:
                stages = list(available_stages.keys())
            
            # Run specified stages
            for stage_num in stages:
                if stage_num in available_stages:
                    stage_name, stage_class = available_stages[stage_num]
                    self.logger.info(f"\n=== STAGE {stage_num}: {stage_name.upper()} ===")
                    stage_instance = stage_class(self.target, self.logger, self.tool_manager, self.execution_engine)
                    self.findings[stage_name.lower().replace(" ", "_")] = stage_instance.run()
                else:
                    self.logger.warning(f"Invalid stage number: {stage_num}")
            
            # Generate final report
            self._generate_report()
            
            self.logger.info("Penetration test completed successfully.")
            
        except Exception as e:
            self.logger.error(f"Error during penetration test: {str(e)}")
            raise

    def _generate_report(self):
        """Generate the final penetration test report"""
        self.logger.info("Generating final report...")
        
        # Save findings to JSON
        findings_file = f"{self.output_dir}/findings_{self.timestamp}.json"
        with open(findings_file, "w") as f:
            json.dump(self.findings, f, indent=4)
            
        self.logger.info(f"Detailed findings saved to {findings_file}")
        
        # Generate executive summary
        self._generate_executive_summary()
        
        self.logger.info(f"Final report saved to {self.report_file}")

    def _generate_executive_summary(self):
        """Generate an executive summary of the penetration test"""
        with open(self.report_file, "a") as f:
            f.write("\n\n")
            f.write("="*80 + "\n")
            f.write("EXECUTIVE SUMMARY\n")
            f.write("="*80 + "\n\n")
            
            # Information Gathering Summary
            f.write("## Information Gathering\n")
            if self.findings["information_gathering"]:
                for category, data in self.findings["information_gathering"].items():
                    f.write(f"- {category.replace('_', ' ').title()}: ")
                    if data:
                        f.write("Information collected successfully\n")
                    else:
                        f.write("No information collected\n")
            else:
                f.write("- No information gathering performed\n")
                
            f.write("\n")
            
            # Vulnerability Assessment Summary
            f.write("## Vulnerability Assessment\n")
            if self.findings["vulnerability_assessment"]:
                for category, data in self.findings["vulnerability_assessment"].items():
                    f.write(f"- {category.replace('_', ' ').title()}: ")
                    if data:
                        f.write("Vulnerabilities identified\n")
                    else:
                        f.write("No vulnerabilities identified\n")
            else:
                f.write("- No vulnerability assessment performed\n")
                
            f.write("\n")
            
            # Exploitation Summary
            f.write("## Exploitation\n")
            if self.findings["exploitation"]:
                for category, data in self.findings["exploitation"].items():
                    f.write(f"- {category.replace('_', ' ').title()}: ")
                    if data:
                        f.write("Exploitation successful\n")
                    else:
                        f.write("Exploitation failed\n")
            else:
                f.write("- No exploitation performed\n")
                
            f.write("\n")
            
            # Post-Exploitation Summary
            f.write("## Post-Exploitation\n")
            if self.findings["post_exploitation"]:
                for category, data in self.findings["post_exploitation"].items():
                    f.write(f"- {category.replace('_', ' ').title()}: ")
                    if data:
                        f.write("Activities performed successfully\n")
                    else:
                        f.write("Activities failed\n")
            else:
                f.write("- No post-exploitation performed\n")
                
            f.write("\n")
            
            # Lateral Movement Summary
            f.write("## Lateral Movement\n")
            if self.findings["lateral_movement"]:
                for category, data in self.findings["lateral_movement"].items():
                    f.write(f"- {category.replace('_', ' ').title()}: ")
                    if data:
                        f.write("Movement successful\n")
                    else:
                        f.write("Movement failed\n")
            else:
                f.write("- No lateral movement performed\n")
                
            f.write("\n")
            
            # Recommendations
            f.write("## Recommendations\n")
            f.write("- Update all software to the latest versions\n")
            f.write("- Implement proper access controls\n")
            f.write("- Conduct regular security assessments\n")
            f.write("- Train employees on security best practices\n")
            f.write("- Implement a comprehensive security policy\n")

def main():
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="Penetration Testing Framework")
    parser.add_argument("-t", "--target", required=True, help="Target IP address or hostname")
    parser.add_argument("-o", "--output", default="reports", help="Output directory for reports")
    parser.add_argument("-p", "--profile", default="default", help="Scan profile to use")
    parser.add_argument("-s", "--stage", type=int, nargs="+", help="Stage numbers to run (1-5). If not specified, all stages will run.")
    
    args = parser.parse_args()
    
    # Validate stage numbers if provided
    if args.stage:
        for stage in args.stage:
            if stage not in range(1, 6):
                parser.error(f"Invalid stage number: {stage}. Stage numbers must be between 1 and 5.")
    
    # Initialize and run framework
    framework = PenTestFramework(args.target, args.output, args.profile)
    framework.run_all(args.stage)

if __name__ == "__main__":
    main() 